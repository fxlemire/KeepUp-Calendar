//@author: a0100644w



	/**
	 * origin: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp
	 */

bool CommandParser::isFoundBack(string big, string small){
	if(big.rfind(small)==string::npos){
		return false;
	}
	return true;
}

	// End of segment: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp





	/**
	 * origin: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp
	 */

//get the local timezone
string CommandParser::getCurrentDate(){
	char buffer[100] = {0};
	time_t localTime;
	struct tm timenow;
	localTime = time(NULL);
	localtime_s(&timenow,&localTime);
	strftime(buffer, 100, "%d/%m/%Y",&timenow);
	currentWeekDay = (timenow.tm_wday+standardWeek)%lengthofAWeek;
	localYear = timenow.tm_year + standardYear;
	currentMonth = timenow.tm_mon+positionModerator1;
	currentDay = timenow.tm_mday;
	stringstream ss1,ss2,ss3;
	ss1 << localYear;
	ss1 >> currentYear;
	ss2 << currentMonth;
	ss2 >> localMonth;
	ss3 << buffer;
	ss3 >> currentDate;
	return currentDate;
}

	// End of segment: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp





	/**
	 * origin: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp
	 */

//This end date can be a deadline (by "date") or the end of a duration ("start date - end date")
string CommandParser::getEndDate(string input){
	try {
		if (!isFound(input,endDateIndicator)) {
			return Task::STRING_NOT_EXIST;
		}else if (isFound(nextWord(input, endDateIndicator),dayIndicator)){
		    endDate = nextWord(input, endDateIndicator);
			return endDate;
		}else if(isFound(nextWord(input, endDateIndicator), hourIndicator1) && isFound(nextWord(input, nextWord(input, endDateIndicator)), dayIndicator) ||
		    isFound(nextWord(input, endDateIndicator), hourIndicator2) && isFound(nextWord(input, nextWord(input, endDateIndicator)), dayIndicator) ||
			isFound(nextWord(input, endDateIndicator), afternoonIndicator) && isFound(nextWord(input, nextWord(input, endDateIndicator)), dayIndicator) ||
			isFound(nextWord(input, endDateIndicator),morningIndicator)&&isFound(nextWord(input, nextWord(input, endDateIndicator)), dayIndicator)||
			isNumber(nextWord(input, endDateIndicator)) && isFound(nextWord(input, nextWord(input, endDateIndicator)), dayIndicator)){
				endDate = nextWord(input, nextWord(input, endDateIndicator));
				return endDate;
		}else{
	        return Task::STRING_NOT_EXIST;
	    }
	}catch (exception &) {
	    return Task::STRING_NOT_EXIST;
	}
}

//similar to end date
string CommandParser::getEndTime(string input){
	try {
		if (!isFound(input,endDateIndicator)) {
			return Task::STRING_NOT_EXIST;
		}else if(isFound(nextWord(input, endDateIndicator), hourIndicator1) || isFound(nextWord(input, endDateIndicator), hourIndicator2)||
				isFound(nextWord(input, endDateIndicator), afternoonIndicator) || isFound(nextWord(input, endDateIndicator),morningIndicator)||
				isNumber(nextWord(input,endDateIndicator)) && !isFound(nextWord(input, endDateIndicator), dayIndicator)){
					endTime = nextWord(input, endDateIndicator);
					return endTime;
		}else if(isFound(nextWord(input, endDateIndicator), dayIndicator) && isFound(nextWord(input, nextWord(input, endDateIndicator)), hourIndicator1)||
			isFound(nextWord(input, endDateIndicator), dayIndicator) && isFound(nextWord(input, nextWord(input, endDateIndicator)), hourIndicator2)||
			isFound(nextWord(input, endDateIndicator), dayIndicator) && isFound(nextWord(input, nextWord(input, endDateIndicator)), afternoonIndicator)||
			isFound(nextWord(input, endDateIndicator), dayIndicator) && isFound(nextWord(input, nextWord(input, endDateIndicator)),morningIndicator)||
			isFound(nextWord(input, endDateIndicator), dayIndicator) && isNumber(nextWord(input, nextWord(input, endDateIndicator))) &&
			!isFound(nextWord(input,nextWord(input,endDateIndicator)),dayIndicator)){
				endTime = nextWord(input, nextWord(input, endDateIndicator));
				return endTime;
		}else{
			return Task::STRING_NOT_EXIST;
		}
	}catch (exception &) {
		return Task::STRING_NOT_EXIST;
	}
}

	// End of segment: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp





	/**
	 * origin: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp
	 */

string CommandParser::getEndYear(){
	if (isNotExist(endDate)) {
		return Task::STRING_NOT_EXIST;
	} else {

		if (endDate.find_first_of(dayIndicator) == endDate.find_last_of(dayIndicator)){ // there is only one slash in date format
			getCurrentDate();
			return currentYear;
		}
		string year = endDate.substr(endDate.find_last_of(dayIndicator) + positionModerator1,
			endDate.size() - endDate.find_last_of(dayIndicator));
		endDate = endDate.substr(startingPosition,endDate.find_last_of(dayIndicator));
		return year;
	}
}

string CommandParser::getEndMonth(){
	if (isNotExist(endDate)) {
		return Task::STRING_NOT_EXIST;
	}
	string month = endDate.substr(endDate.find_first_of(dayIndicator) + positionModerator1,
		endDate.find_last_of(dayIndicator) - endDate.find_first_of(dayIndicator) - positionModerator1);
	endDate = endDate.substr(startingPosition, endDate.find_first_of(dayIndicator));
	return month;
}

string CommandParser::getEndDay(){
	return endDate;
}

string CommandParser::getEndHour(){
	
	try {
		if (isNotExist(endTime)) {
			return Task::STRING_NOT_EXIST;
		}
		string endHour;
		if (endTime.find_first_of(hourIndicator)==string::npos) { //if only hour is indicated
			if (isFound(endTime,afternoonIndicator)) { //if "pm" is detected
				endHour = endTime.substr(startingPosition,endTime.find(afternoonIndicator));
				unsigned int temp = stoi(endHour); //convert string hour to an integer hour
				if (temp>startingPosition && temp <hourModerator) { //if not noon or midnight, add 12 to convert to 24-hour timing
					temp += hourModerator;
				}	
				endHour = to_string(temp);//convert back to string
				return endHour;
			}
			if (isFound(endTime,morningIndicator)) {
				endHour = endTime.substr(startingPosition,endTime.find(morningIndicator));
				return endHour;
			}
			return endTime;
		}
		else {
			if (isFound(endTime,afternoonIndicator)) {
				endTime = endTime.substr(startingPosition,endTime.find(afternoonIndicator));
				string hour = endTime.substr(startingPosition,endTime.find_first_of(hourIndicator));
				unsigned int temp = stoi(hour);
				if (temp>startingPosition && temp<hourModerator) {
					temp += hourModerator;
				}
				hour = to_string(temp);
				return hour;
			}
			if (isFound(endTime,morningIndicator)) {
				endTime = endTime.substr(startingPosition,endTime.find(morningIndicator));
			}

			return endTime.substr(startingPosition,endTime.find_first_of(hourIndicator));
		}
	} catch (exception &) {
		return Task::STRING_NOT_EXIST;
	}
}

string CommandParser::getEndMinute(){
	try {
		if (isNotExist(endTime)) {
			return Task::STRING_NOT_EXIST;
		}
		unsigned int start = endTime.find_first_of(hourIndicator);
		if (start == string::npos){
			return minuteNotExist;
		}
		start += positionModerator1;
		return endTime.substr(start, endTime.size() - start);
	} catch (exception &) {
		return Task::STRING_NOT_EXIST;
	}
}

string CommandParser::getPriority(string input) {
	return Task::STRING_NOT_EXIST;
}


	// End of segment: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp





	/**
	 * origin: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp
	 */

/* gets date and time from user input from edit request */
vector<string> CommandParser::getDateAndTime(string input) {
	vector<string> dateAndTime(DATE_ENUM::DATE_ENUM::LASTPOSITION);

	while (hasTextMonth(input)) {
		string front = input.substr(startingPosition,input.find(textDate));
		unsigned int start = input.find(textDate)+textDate.size();
		string back = input.substr(start, input.size()-start);
		string numberDate = convertTextToNumber(textDate);			
		input = front + numberDate + back;
	}
		
	while(hasWeekDay(input)){
		if(weekNo == nextIndicator || weekNo == thisIndicator){
				lengthFront = lengthFront - positionModerator1 - weekNo.size();
		}else if(weekNo == dateIndicator || weekNo == endDateIndicator || weekNo == endTime){
				lengthFront = lengthFront;
		}
	    string front = input.substr(startingPosition, lengthFront);
	    string back = input.substr(lengthBack,input.size() - lengthBack);
		input = front + getDateFromWeek() + back;
	}

	while(hasSpecialDay(input)){
		string front = input.substr(startingPosition,lengthFront);
		string back = input.substr(lengthBack,input.size()-lengthBack);
		input = front + getDateFromWeek() + back;
	}
	startDate = getStartDate(input);
	startTime = getStartTime(input);
	endDate = getEndDate(input);
	endTime = getEndTime(input);
	duration = Task::STRING_NOT_EXIST;
		part = input;
		while (isFound(part, durationIndicator)) {
			int position = part.find(durationIndicator);
			position += positionModerator1;
			string temp = part.substr(part.find_first_not_of(commandIndicator,position),1);
			if (isNumber(temp)) {
				duration = getDuration(part);
				dateTimeModifier();
			}
			part = part.substr(position, part.size()-position);
		}

	if(isNotExist(startDate) && !isNotExist(startTime) ||!isNotExist(endTime) && isNotExist(startDate)){
			getCurrentDate();
			if(endDate != currentDate){
			    startDate = currentDate;
			}else{
				startDate = Task::STRING_NOT_EXIST;
			}
		}

	if(isNotExist(endDate)&&!isNotExist(endTime)&&isNotExist(startTime)){
		getCurrentDate();
		if(startDate == currentDate){
		    endDate = currentDate;
		}else{
			endDate =  Task::STRING_NOT_EXIST;
		}
	}

	dateAndTime.at(DATE_ENUM::DATE_ENUM::STARTYEAR) = getStartYear();
	dateAndTime.at(DATE_ENUM::DATE_ENUM::STARTMONTH) = getStartMonth();
	dateAndTime.at(DATE_ENUM::DATE_ENUM::STARTDAY) = getStartDay();
	dateAndTime.at(DATE_ENUM::DATE_ENUM::STARTHOUR) = getStartHour();
	dateAndTime.at(DATE_ENUM::DATE_ENUM::STARTMINUTE) = getStartMinute();
	dateAndTime.at(DATE_ENUM::DATE_ENUM::ENDYEAR) = getEndYear();
	dateAndTime.at(DATE_ENUM::DATE_ENUM::ENDMONTH) = getEndMonth();
	dateAndTime.at(DATE_ENUM::DATE_ENUM::ENDDAY) = getEndDay();
	dateAndTime.at(DATE_ENUM::DATE_ENUM::ENDHOUR) = getEndHour();
	dateAndTime.at(DATE_ENUM::DATE_ENUM::ENDMINUTE) = getEndMinute();

	dateAndTime.at(DATE_ENUM::DATE_ENUM::ISDONE) = "false";
	if (startDate == Task::STRING_NOT_EXIST && endDate == Task::STRING_NOT_EXIST) {
		dateAndTime.at(DATE_ENUM::DATE_ENUM::HASDATE) = "false";
		dateAndTime.at(DATE_ENUM::DATE_ENUM::HASEXPIRED) = "false";
	}
	else{
		dateAndTime.at(DATE_ENUM::DATE_ENUM::HASDATE) = "true";
		dateAndTime.at(DATE_ENUM::DATE_ENUM::HASEXPIRED) = "false";
	}

	return dateAndTime;
}

	// End of segment: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp





	/**
	 * origin: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp
	 */

	// End of segment: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp





	/**
	 * origin: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp
	 */

//check if the string found from back is a single word separated by spaces
bool CommandParser::isIndependentBack(string input, string s) {
	if (input.rfind(s) == startingPosition && input.substr(input.rfind(s)+s.size(), positionModerator1) != commandIndicator) {
			return false;
	}else if(input.rfind(s)+s.size() - positionModerator1 == input.size() &&
		input.substr(input.rfind(s) - positionModerator1, positionModerator1) != commandIndicator){
			return false;
	}else if ((input.substr(input.rfind(s)+s.size(),positionModerator1)) != commandIndicator&&
		(input.substr(input.rfind(s) - positionModerator1, positionModerator1) != commandIndicator)){
			return false;
	}else{
		return true;
	}
}
	// End of segment: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp





	/**
	 * origin: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp
	 */

//check the previous word before the weekday(mon - sun)
string CommandParser::weekNumber(string big, string small) {
	unsigned int end = big.rfind(small);
	unsigned int start = end - positionModerator1;
	big = big.substr(startingPosition, start);
	start = big.rfind(commandIndicator,start);
	start += positionModerator1;
	end -=positionModerator1;
	return big.substr(start, end-start);
}

//check if the user type weekDay (mon- sun) to represent the date
bool CommandParser::hasWeekDay(string input){
	endTime = getEndTime(input);
	if(isFound(input, mondayIndicator1)&&isIndependent(input, mondayIndicator1)&&
		(weekNumber(input, mondayIndicator1) == thisIndicator || weekNumber(input, mondayIndicator1) == nextIndicator||
		weekNumber(input, mondayIndicator1) == dateIndicator || weekNumber(input, mondayIndicator1) == endDateIndicator||
		weekNumber(input, mondayIndicator1) == endTime)){
		lengthFront = input.find(mondayIndicator1);
		lengthBack = lengthFront + mondayIndicator1.size();
		weekDay = monday;
		weekNo = weekNumber(input, mondayIndicator1);
		return true;
	}else if(isFoundBack(input, mondayIndicator1) && isIndependentBack(input, mondayIndicator1)&&
		(weekNumber(input, mondayIndicator1) == thisIndicator || weekNumber(input, mondayIndicator1) == nextIndicator||
		weekNumber(input, mondayIndicator1) == dateIndicator || weekNumber(input, mondayIndicator1) == endDateIndicator||
		weekNumber(input, mondayIndicator1) == endTime)){
		lengthFront = input.rfind(mondayIndicator1);
		lengthBack = lengthFront + mondayIndicator1.size();
		weekDay = monday;
		weekNo = weekNumber(input, mondayIndicator1);
		return true;
	}else if(isFound(input, mondayIndicator2) && isIndependent(input, mondayIndicator2)&&
		(weekNumber(input, mondayIndicator2) == thisIndicator || weekNumber(input, mondayIndicator2) == nextIndicator||
		weekNumber(input, mondayIndicator2) == dateIndicator||weekNumber(input, mondayIndicator2) == endDateIndicator||
		weekNumber(input, mondayIndicator2) == endTime)){
		lengthFront = input.find(mondayIndicator2);
		lengthBack = lengthFront + mondayIndicator2.size();
		weekDay = monday;
		weekNo = weekNumber(input, mondayIndicator2);
		return true;
	}else if(isFoundBack(input, mondayIndicator2) && isIndependentBack(input, mondayIndicator2)&&
		(weekNumber(input, mondayIndicator2) == thisIndicator || weekNumber(input, mondayIndicator2) == nextIndicator||
		weekNumber(input, mondayIndicator2) == dateIndicator || weekNumber(input, mondayIndicator2) == endDateIndicator||
		weekNumber(input, mondayIndicator2) == endTime)){
		lengthFront = input.rfind(mondayIndicator2);
		lengthBack = lengthFront + mondayIndicator2.size();
		weekDay = monday;
		weekNo = weekNumber(input, mondayIndicator2);
		return true;
	}else if(isFound(input, tuesdayIndicator1) && isIndependent(input, tuesdayIndicator1)&&
		(weekNumber(input, tuesdayIndicator1) == thisIndicator || weekNumber(input, tuesdayIndicator1) == nextIndicator||
		weekNumber(input, tuesdayIndicator1) == dateIndicator || weekNumber(input, tuesdayIndicator1) == endDateIndicator||
		weekNumber(input, tuesdayIndicator1) == endTime)){
		lengthFront = input.find(tuesdayIndicator1);
		lengthBack = lengthFront + tuesdayIndicator1.size();
		weekDay = tuesday;
		weekNo = weekNumber(input, tuesdayIndicator1);
		return true;
	}else if(isFoundBack(input, tuesdayIndicator1) && isIndependentBack(input, tuesdayIndicator1)&&
		(weekNumber(input, tuesdayIndicator1) == thisIndicator || weekNumber(input, tuesdayIndicator1) == nextIndicator||
		weekNumber(input, tuesdayIndicator1) == dateIndicator || weekNumber(input, tuesdayIndicator1) == endDateIndicator||
		weekNumber(input, tuesdayIndicator1) == endTime)){
		lengthFront = input.rfind(tuesdayIndicator1);
		lengthBack = lengthFront + tuesdayIndicator1.size();
		weekDay = tuesday;
		weekNo = weekNumber(input, tuesdayIndicator1);
		return true;
	}else if(isFound(input, tuesdayIndicator2) && isIndependent(input, tuesdayIndicator2)&&
		(weekNumber(input, tuesdayIndicator2) == thisIndicator || weekNumber(input, tuesdayIndicator2) == nextIndicator||
		weekNumber(input, tuesdayIndicator2) == dateIndicator || weekNumber(input, tuesdayIndicator2) == endDateIndicator||
		weekNumber(input, tuesdayIndicator2) == endTime)){
		lengthFront = input.find(tuesdayIndicator2);
		lengthBack = lengthFront + tuesdayIndicator2.size();
		weekDay = tuesday;
		weekNo = weekNumber(input, tuesdayIndicator2);
		return true;
	}else if(isFoundBack(input, tuesdayIndicator2) && isIndependentBack(input, tuesdayIndicator2)&&
		(weekNumber(input, tuesdayIndicator2) == thisIndicator || weekNumber(input, tuesdayIndicator2) == nextIndicator||
		weekNumber(input, tuesdayIndicator2) == dateIndicator || weekNumber(input, tuesdayIndicator2) == endDateIndicator||
		weekNumber(input, tuesdayIndicator2) == endTime)){
		lengthFront = input.rfind(tuesdayIndicator2);
		lengthBack = lengthFront + tuesdayIndicator2.size();
		weekDay = tuesday;
		weekNo = weekNumber(input, tuesdayIndicator2);
		return true;
	}else if(isFound(input, wednesdayIndicator1) && isIndependent(input, wednesdayIndicator1)&&
		(weekNumber(input, wednesdayIndicator1) == thisIndicator || weekNumber(input, wednesdayIndicator1) == nextIndicator||
		weekNumber(input, wednesdayIndicator1) == dateIndicator || weekNumber(input, wednesdayIndicator1) == endDateIndicator||
		weekNumber(input, wednesdayIndicator1) == endTime)){
		lengthFront = input.find(wednesdayIndicator1);
		lengthBack = lengthFront + wednesdayIndicator1.size();
		weekDay = wednesday;
		weekNo = weekNumber(input, wednesdayIndicator1);
		return true;
	}else if(isFoundBack(input, wednesdayIndicator1) && isIndependentBack(input, wednesdayIndicator1)&&
		(weekNumber(input, wednesdayIndicator1) == thisIndicator || weekNumber(input, wednesdayIndicator1) == nextIndicator||
		weekNumber(input, wednesdayIndicator1) == dateIndicator || weekNumber(input, wednesdayIndicator1) == endDateIndicator||
		weekNumber(input, wednesdayIndicator1) == endTime)){
		lengthFront = input.rfind(wednesdayIndicator1);
		lengthBack = lengthFront+wednesdayIndicator1.size();
		weekDay = wednesday;
		weekNo = weekNumber(input, wednesdayIndicator1);
		return true;
	}else if(isFound(input, wednesdayIndicator2) && isIndependent(input, wednesdayIndicator2)&&
		(weekNumber(input, wednesdayIndicator2) == thisIndicator || weekNumber(input, wednesdayIndicator2) == nextIndicator||
		weekNumber(input, wednesdayIndicator2) == dateIndicator || weekNumber(input, wednesdayIndicator2) == endDateIndicator||
		weekNumber(input, wednesdayIndicator2) == endTime)){
		lengthFront = input.find(wednesdayIndicator2);
		lengthBack = lengthFront+wednesdayIndicator2.size();
		weekDay = wednesday;
		weekNo = weekNumber(input,wednesdayIndicator2);
		return true;
	}else if(isFoundBack(input, wednesdayIndicator2) && isIndependentBack(input, wednesdayIndicator2)&&
		(weekNumber(input, wednesdayIndicator2) == thisIndicator || weekNumber(input, wednesdayIndicator2) == nextIndicator)){
		lengthFront = input.rfind(wednesdayIndicator2);
		lengthBack = lengthFront + wednesdayIndicator2.size();
		weekDay = wednesday;
		weekNo = weekNumber(input, wednesdayIndicator2);
		return true;
	}else if(isFound(input, thursdayIndicator1) && isIndependent(input, thursdayIndicator1)&&
		(weekNumber(input, thursdayIndicator1) == thisIndicator || weekNumber(input, thursdayIndicator1) == nextIndicator||
		weekNumber(input, thursdayIndicator1) == dateIndicator || weekNumber(input, thursdayIndicator1) == endDateIndicator||
		weekNumber(input, thursdayIndicator1) == endTime)){
		lengthFront = input.find(thursdayIndicator1);
		lengthBack = lengthFront + thursdayIndicator1.size();
		weekDay = thursday;
		weekNo = weekNumber(input, thursdayIndicator1);
		return true;
	}else if(isFoundBack(input, thursdayIndicator1) && isIndependentBack(input, thursdayIndicator1)&&
		(weekNumber(input, thursdayIndicator1)==thisIndicator || weekNumber(input, thursdayIndicator1) == nextIndicator||
		weekNumber(input, thursdayIndicator1) == dateIndicator || weekNumber(input, thursdayIndicator1) == endDateIndicator||
		weekNumber(input, thursdayIndicator1) == endTime)){
		lengthFront = input.rfind(thursdayIndicator1);
		lengthBack = lengthFront+thursdayIndicator1.size();
		weekDay = thursday;
		weekNo = weekNumber(input, thursdayIndicator1);
		return true;
	}else if(isFound(input, thursdayIndicator2) && isIndependent(input, thursdayIndicator2)&&
		(weekNumber(input, thursdayIndicator2 )== thisIndicator || weekNumber(input, thursdayIndicator2) == nextIndicator||
		weekNumber(input, thursdayIndicator2) == dateIndicator || weekNumber(input, thursdayIndicator2) == endDateIndicator||
		weekNumber(input, thursdayIndicator2) == endTime)){
		lengthFront = input.find(thursdayIndicator2);
		lengthBack = lengthFront + thursdayIndicator2.size();
		weekDay = thursday;
		weekNo = weekNumber(input, thursdayIndicator2);
		return true;
	}else if(isFoundBack(input, thursdayIndicator2) && isIndependentBack(input, thursdayIndicator2)&&
		(weekNumber(input, thursdayIndicator2) == thisIndicator || weekNumber(input, thursdayIndicator2) == nextIndicator||
		weekNumber(input, thursdayIndicator2) == dateIndicator|| weekNumber(input, thursdayIndicator2) == endDateIndicator||
		weekNumber(input, thursdayIndicator2) == endTime)){
		lengthFront = input.rfind(thursdayIndicator2);
		lengthBack = lengthFront + thursdayIndicator2.size();
		weekDay = thursday;
		weekNo = weekNumber(input, thursdayIndicator2);
		return true;
	}else if(isFound(input, thursdayIndicator3) && isIndependent(input, thursdayIndicator3)&&
		(weekNumber(input, thursdayIndicator3) == thisIndicator || weekNumber(input, thursdayIndicator3) == nextIndicator||
		weekNumber(input, thursdayIndicator3) == dateIndicator||weekNumber(input, thursdayIndicator3) == endDateIndicator||
		weekNumber(input, thursdayIndicator3) == endTime)){
		lengthFront = input.find(thursdayIndicator3);
		lengthBack = lengthFront + thursdayIndicator3.size();
		weekDay = thursday;
		weekNo = weekNumber(input, thursdayIndicator3);
		return true;
	}else if(isFoundBack(input, thursdayIndicator3)&&isIndependentBack(input, thursdayIndicator3)&&
		(weekNumber(input, thursdayIndicator3) == thisIndicator || weekNumber(input, thursdayIndicator3) == nextIndicator||
		weekNumber(input, thursdayIndicator3) == dateIndicator || weekNumber(input, thursdayIndicator3) == endDateIndicator||
		weekNumber(input, thursdayIndicator3) == endTime)){
		lengthFront = input.rfind(thursdayIndicator3);
		lengthBack = lengthFront + thursdayIndicator3.size();
		weekDay = thursday;
		weekNo = weekNumber(input, thursdayIndicator3);
		return true;
	}else if(isFound(input, fridayIndicator1) && isIndependent(input, fridayIndicator1)&&
		(weekNumber(input, fridayIndicator1) == thisIndicator || weekNumber(input, fridayIndicator1) == nextIndicator||
		weekNumber(input, fridayIndicator1) == dateIndicator || weekNumber(input, fridayIndicator1) == endDateIndicator||
		weekNumber(input, fridayIndicator1) == endTime)){
		lengthFront = input.find(fridayIndicator1);
		lengthBack = lengthFront + fridayIndicator1.size();
		weekDay = friday;
		weekNo = weekNumber(input, fridayIndicator1);
		return true;
	}else if(isFoundBack(input, fridayIndicator1) && isIndependentBack(input, fridayIndicator1)&&
		(weekNumber(input, fridayIndicator1) == thisIndicator || weekNumber(input, fridayIndicator1) == nextIndicator||
		weekNumber(input, fridayIndicator1) == dateIndicator || weekNumber(input, fridayIndicator1) == endDateIndicator||
		weekNumber(input, fridayIndicator1) == endTime)){
		lengthFront = input.rfind(fridayIndicator1);
		lengthBack = lengthFront + fridayIndicator1.size();
		weekDay = friday;
		weekNo = weekNumber(input, fridayIndicator1);
		return true;
	}else if(isFound(input, fridayIndicator2) && isIndependent(input, fridayIndicator2)&&
		(weekNumber(input, fridayIndicator2) == thisIndicator || weekNumber(input, fridayIndicator2) == nextIndicator||
		weekNumber(input, fridayIndicator2) == dateIndicator || weekNumber(input, fridayIndicator2) == endDateIndicator||
		weekNumber(input, fridayIndicator2) == endTime)){
		lengthFront = input.find(fridayIndicator2);
		lengthBack = lengthFront + fridayIndicator2.size();
		weekDay = friday;
		weekNo = weekNumber(input, fridayIndicator2);
		return true;
	}else if(isFoundBack(input, fridayIndicator2) && isIndependentBack(input, fridayIndicator2)&&
		(weekNumber(input, fridayIndicator2) == thisIndicator || weekNumber(input, fridayIndicator2) == nextIndicator||
		weekNumber(input, fridayIndicator2) == dateIndicator || weekNumber(input, fridayIndicator2) == endDateIndicator||
		weekNumber(input, fridayIndicator2) == endTime)){
		lengthFront = input.rfind(fridayIndicator2);
		lengthBack = lengthFront + fridayIndicator2.size();
		weekDay = friday;
		weekNo = weekNumber(input, fridayIndicator2);
		return true;
	}else if(isFound(input, saturdayIndicator1) && isIndependent(input, saturdayIndicator1)&&
		(weekNumber(input, saturdayIndicator1) == thisIndicator||weekNumber(input, saturdayIndicator1) == nextIndicator||
		weekNumber(input, saturdayIndicator1) == dateIndicator||weekNumber(input, saturdayIndicator1) == endDateIndicator||
		weekNumber(input, saturdayIndicator1) == endTime)){
		lengthFront = input.find(saturdayIndicator1);
		lengthBack = lengthFront + saturdayIndicator1.size();
		weekDay = saturday;
		weekNo = weekNumber(input,saturdayIndicator1);
		return true;
	}else if(isFoundBack(input, saturdayIndicator1) && isIndependentBack(input, saturdayIndicator1)&&
		(weekNumber(input, saturdayIndicator1) == thisIndicator||weekNumber(input, saturdayIndicator1) == nextIndicator||
		weekNumber(input, saturdayIndicator1) == dateIndicator||weekNumber(input, saturdayIndicator1) == endDateIndicator||
		weekNumber(input, saturdayIndicator1) == endTime)){
		lengthFront = input.rfind(saturdayIndicator1);
		lengthBack = lengthFront + saturdayIndicator1.size();
		weekDay = saturday;
		weekNo = weekNumber(input, saturdayIndicator1);
		return true;
	}else if(isFound(input, saturdayIndicator2) && isIndependent(input, saturdayIndicator2)&&
		(weekNumber(input, saturdayIndicator2) == thisIndicator || weekNumber(input, saturdayIndicator2) == nextIndicator||
		weekNumber(input, saturdayIndicator2) == dateIndicator || weekNumber(input, saturdayIndicator2) == endDateIndicator||
		weekNumber(input, saturdayIndicator2) == endTime)){
		lengthFront = input.find(saturdayIndicator2);
		lengthBack = lengthFront + saturdayIndicator2.size();
		weekDay = saturday;
		weekNo = weekNumber(input, saturdayIndicator2);
		return true;
	}else if(isFoundBack(input, saturdayIndicator2) && isIndependentBack(input, saturdayIndicator2)&&
		(weekNumber(input, saturdayIndicator2) == thisIndicator || weekNumber(input, saturdayIndicator2) == nextIndicator||
		weekNumber(input, saturdayIndicator2) == dateIndicator || weekNumber(input, saturdayIndicator2) == endDateIndicator||
		weekNumber(input, saturdayIndicator2) == endTime)){
		lengthFront = input.rfind(saturdayIndicator2);
		lengthBack = lengthFront + saturdayIndicator2.size();
		weekDay = saturday;
		weekNo = weekNumber(input, saturdayIndicator2);
		return true;
	}else if(isFound(input, sundayIndicator1) && isIndependent(input, sundayIndicator1)&&
		(weekNumber(input, sundayIndicator1) == thisIndicator||weekNumber(input, sundayIndicator1) == nextIndicator||
		weekNumber(input, sundayIndicator1) == dateIndicator||weekNumber(input, sundayIndicator1) == endDateIndicator||
		weekNumber(input, sundayIndicator1) == endTime)){
		lengthFront = input.find(sundayIndicator1);
		lengthBack = lengthFront + sundayIndicator1.size();
		weekDay = sunday;
		weekNo = weekNumber(input, sundayIndicator1);
		return true;
	}else if(isFoundBack(input, sundayIndicator1) && isIndependentBack(input, sundayIndicator1)&&
		(weekNumber(input, sundayIndicator1) == thisIndicator || weekNumber(input, sundayIndicator1) == nextIndicator||
		weekNumber(input, sundayIndicator1) == dateIndicator || weekNumber(input, sundayIndicator1) == endDateIndicator||
		weekNumber(input, sundayIndicator1) == endTime)){
		lengthFront = input.rfind(sundayIndicator1);
		lengthBack = lengthFront+sundayIndicator1.size();
		weekDay = sunday;
		weekNo = weekNumber(input, sundayIndicator1);
		return true;
	}else if(isFound(input, sundayIndicator2) && isIndependent(input, sundayIndicator2)&&
		(weekNumber(input, sundayIndicator2) == thisIndicator || weekNumber(input, sundayIndicator2) == nextIndicator||
		weekNumber(input, sundayIndicator2) == dateIndicator || weekNumber(input, sundayIndicator2) == endDateIndicator||
		weekNumber(input, sundayIndicator2) == endTime)){
		lengthFront = input.find(sundayIndicator2);
		lengthBack = lengthFront + sundayIndicator2.size();
		weekDay = sunday;
		weekNo = weekNumber(input, sundayIndicator2);
		return true;
	}else if(isFoundBack(input, sundayIndicator2) && isIndependentBack(input, sundayIndicator2)&&
		(weekNumber(input, sundayIndicator2)==thisIndicator || weekNumber(input, sundayIndicator2) == nextIndicator||
		weekNumber(input, sundayIndicator2) == dateIndicator || weekNumber(input, sundayIndicator2)==endDateIndicator||
		weekNumber(input, sundayIndicator2) == endTime)){
		lengthFront = input.rfind(sundayIndicator2);
		lengthBack = lengthFront + sundayIndicator2.size();
		weekDay = sunday;
		weekNo = weekNumber(input, sundayIndicator2);
		return true;
	}
	else {
		return false;
	}
}

//check if the user type the special day (today or tomorrow) to represent the date
bool CommandParser::hasSpecialDay(string input){
	if(isFound(input,todayIndicator1)&&isIndependent(input,todayIndicator1)){
		lengthFront=input.find(todayIndicator1);
		lengthBack=lengthFront+todayIndicator1.size();
		specialDay = todayIndicator1;
		return true;
	}else if(isFoundBack(input,todayIndicator1)&&isIndependentBack(input,todayIndicator1)){
		lengthFront=input.rfind(todayIndicator1);
		lengthBack=lengthFront+todayIndicator1.size();
		specialDay = todayIndicator1;
		return true;
	}else if(isFound(input,todayIndicator2)&&isIndependent(input,todayIndicator2)){
		lengthFront=input.find(todayIndicator2);
		lengthBack=lengthFront+todayIndicator2.size();
		specialDay = todayIndicator2;
		return true;
	}else if(isFoundBack(input,todayIndicator2)&&isIndependentBack(input,todayIndicator2)){
		lengthFront=input.rfind(todayIndicator2);
		lengthBack=lengthFront+todayIndicator2.size();
		specialDay = todayIndicator2;
		return true;
	}else if(isFound(input,tomorrowIndicator1)&&isIndependent(input,tomorrowIndicator1)){
		lengthFront=input.find(tomorrowIndicator1);
		lengthBack=lengthFront+tomorrowIndicator1.size();
		specialDay = tomorrowIndicator1;
		return true;
	}else if(isFoundBack(input,tomorrowIndicator1)&&isIndependentBack(input,tomorrowIndicator1)){
		lengthFront=input.rfind(tomorrowIndicator1);
		lengthBack=lengthFront+tomorrowIndicator1.size();
		specialDay = tomorrowIndicator1;
		return true;
	}else if(isFound(input,tomorrowIndicator2)&&isIndependent(input,tomorrowIndicator2)){
		lengthFront=input.find(tomorrowIndicator2);
		lengthBack=lengthFront+tomorrowIndicator2.size();
		specialDay = tomorrowIndicator2;
		return true;
	}else if(isFoundBack(input,tomorrowIndicator2)&&isIndependentBack(input,tomorrowIndicator2)){
		lengthFront=input.rfind(tomorrowIndicator2);
		lengthBack=lengthFront+tomorrowIndicator2.size();
		specialDay = tomorrowIndicator2;
		return true;
	}else if(isFound(input,tomorrowIndicator3)&&isIndependent(input,tomorrowIndicator3)){
		lengthFront=input.find(tomorrowIndicator3);
		lengthBack=lengthFront+tomorrowIndicator3.size();
		specialDay = tomorrowIndicator3;
		return true;
	}else if(isFoundBack(input,tomorrowIndicator3)&&isIndependentBack(input,tomorrowIndicator3)){
		lengthFront=input.rfind(tomorrowIndicator3);
		lengthBack=lengthFront+tomorrowIndicator3.size();
		specialDay = tomorrowIndicator3;
		return true;
	}else{
		return false;
	}
}




string CommandParser::getDateFromWeek(){
	getCurrentDate();
	if(weekNo == thisIndicator||weekNo == dateIndicator||weekNo == endDateIndicator||weekNo == endTime){
		weekDay += startingPosition;
		taskDay = currentDay + weekDay- currentWeekDay;
	}else if(weekNo == nextIndicator){
		weekDay += lengthofAWeek; 
		taskDay = currentDay + weekDay- currentWeekDay;
			}else if(specialDay == todayIndicator1 || specialDay == todayIndicator2){ 
		taskDay = currentDay;
	}else if(specialDay == tomorrowIndicator1||specialDay == tomorrowIndicator2 || specialDay == tomorrowIndicator3){
			taskDay = currentDay + positionModerator1;
	}
	taskMonth = currentMonth;
	taskYear = localYear;
	if((currentMonth == monthIndicator1 || currentMonth==monthIndicator3 || currentMonth==monthIndicator5 ||
		currentMonth == monthIndicator7 || currentMonth==monthIndicator8 || currentMonth == monthIndicator10 ||
		currentMonth == monthIndicator12) && taskDay>monthModerator2){
			taskDay = taskDay - monthModerator2;
			taskMonth += positionModerator1;
	}else if((currentMonth == monthIndicator4 || currentMonth == monthIndicator6 || currentMonth == monthIndicator9 ||
		currentMonth == monthIndicator11) && taskDay > monthModerator1){
			taskDay = taskDay - monthModerator1;
			taskMonth += positionModerator1;
	}else if(currentMonth == monthIndicator2 && localYear%4 == 0 && taskDay>monthModerator3){
		taskDay = taskDay - monthModerator3;
		taskMonth += positionModerator1;
	}else if(currentMonth == monthIndicator2 && localYear%4!=0 && taskDay > monthModerator4){
		taskDay = taskDay - monthModerator4;
		taskMonth += positionModerator1;
	}if(taskMonth > monthIndicator12){
		taskMonth = taskMonth - monthIndicator12;
		taskYear += positionModerator1;
	}
	stringstream ss;
	ss << taskDay << dayIndicator << taskMonth << dayIndicator << taskYear;
	ss >> taskDate;
	return taskDate;
}





	// End of segment: C:\Users\FrancoisXavier\Documents\Visual Studio 2013\Projects\CS2103\KeepUp\Library\CommandParser.cpp





